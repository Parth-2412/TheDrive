# Generated by Django 5.1 on 2025-09-01 02:20

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DriveUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('public_key', models.TextField(unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'drive_users',
            },
        ),
        migrations.CreateModel(
            name='AINode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human readable name', max_length=255)),
                ('public_key', models.TextField(help_text="AI node's ED25519 public key", unique=True)),
                ('endpoint_url', models.URLField(help_text="AI node's API endpoint")),
                ('is_authorized', models.BooleanField(default=False, help_text='Whether this AI node is authorized by app owners')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('own_user_object', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_node', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_nodes',
            },
        ),
        migrations.AddField(
            model_name='driveuser',
            name='preferred_ai_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ainode'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_encrypted', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('ai_processed_at', models.DateTimeField(blank=True, null=True)),
                ('file_hash', models.CharField(help_text='SHA-256 hash of encrypted file for integrity', max_length=64)),
                ('file_name_hash', models.CharField(help_text='SHA-256 hash of encrypted file for integrity', max_length=64)),
                ('key_encrypted', models.TextField(help_text="This file's symmetric key encrypted with the drive master key, in base64 format")),
                ('file_iv', models.TextField(help_text='In base64')),
                ('key_encrypted_iv', models.TextField(help_text='In base64')),
                ('ai_enabled', models.BooleanField(default=False, help_text='Whether this file is AI-searchable')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'files',
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_content_encrypted', models.TextField(help_text='Chunk content encrypted by the AI node')),
                ('order_in_file', models.PositiveBigIntegerField(help_text='Order of the chunk in the file')),
                ('chunk_start', models.PositiveBigIntegerField(help_text='Chunk start index in the file')),
                ('chunk_end', models.PositiveBigIntegerField(help_text='Chunk end index in the file')),
                ('embedding_encrypted', models.TextField(help_text='Vector embedding encrypted by the AI node')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ainode')),
                ('file', models.ForeignKey(help_text='The file the chunk belongs to', on_delete=django.db.models.deletion.CASCADE, to='api.file')),
            ],
            options={
                'db_table': 'document_chunk',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_encrypted', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('folder_name_hash', models.CharField(help_text='SHA-256 hash of encrypted file for integrity', max_length=64)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent folder - null for root folders', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='api.folder')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'folders',
            },
        ),
        migrations.AddField(
            model_name='file',
            name='folder',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='api.folder'),
        ),
        migrations.CreateModel(
            name='AuthNonce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nonce', models.CharField(max_length=64, unique=True)),
                ('challenge_message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nonces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['nonce'], name='api_authnon_nonce_de8346_idx'), models.Index(fields=['expires_at'], name='api_authnon_expires_796e12_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='folder',
            index=models.Index(fields=['user', 'parent'], name='folders_user_id_0d7266_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='folder',
            unique_together={('parent', 'folder_name_hash')},
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['user', 'folder'], name='files_user_id_fa6e25_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['user', 'ai_enabled'], name='files_user_id_6cc0f2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='file',
            unique_together={('folder', 'file_name_hash')},
        ),
    ]
