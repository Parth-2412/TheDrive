# Generated by Django 5.1 on 2025-08-27 20:25

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AINode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human readable name', max_length=255)),
                ('public_key', models.TextField(help_text="AI node's RSA public key", unique=True)),
                ('endpoint_url', models.URLField(help_text="AI node's API endpoint")),
                ('is_authorized', models.BooleanField(default=False, help_text='Whether this AI node is authorized by app owners')),
                ('total_users', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_nodes',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_encrypted', models.BinaryField()),
                ('key_encrypted', models.BinaryField()),
                ('minio_path', models.TextField()),
                ('ai_enabled', models.BooleanField(default=False)),
                ('ai_processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(help_text='File type/extension', max_length=10)),
                ('ai_processed_at', models.DateTimeField(blank=True, null=True)),
                ('file_hash', models.CharField(help_text='SHA-256 hash of encrypted file for integrity', max_length=64)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'files',
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_content_encrypted', models.BinaryField(help_text="Chunk content encrypted with AI node's public key")),
                ('order_in_file', models.PositiveBigIntegerField(help_text='Order of the chunk in the file')),
                ('embedding_encrypted', models.BinaryField(help_text="Vector embedding encrypted with AI node's public key")),
                ('embedding_dimension', models.IntegerField(help_text='Vector dimension')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ainode')),
                ('file', models.ForeignKey(help_text='The file the chunk belongs to', on_delete=django.db.models.deletion.CASCADE, to='api.file')),
            ],
            options={
                'db_table': 'document_chunk',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_encrypted', models.BinaryField()),
                ('key_encrypted', models.BinaryField()),
                ('minio_path', models.TextField()),
                ('ai_enabled', models.BooleanField(default=False)),
                ('ai_processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent folder - null for root folders', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='api.folder')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'folders',
            },
        ),
        migrations.AddField(
            model_name='file',
            name='folder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='api.folder'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('public_key', models.TextField(help_text='RSA public key derived from seed phrase', unique=True)),
                ('storage_used', models.BigIntegerField(default=0, help_text='Storage used in bytes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='users', to='auth.group')),
                ('preferred_ai_node', models.ForeignKey(blank=True, help_text="User's preferred AI node for queries", null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ainode')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='users', to='auth.permission')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='folder',
            index=models.Index(fields=['user', 'parent'], name='folders_user_id_0d7266_idx'),
        ),
        migrations.AddIndex(
            model_name='folder',
            index=models.Index(fields=['user', 'ai_enabled'], name='folders_user_id_71b61d_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['user', 'folder'], name='files_user_id_fa6e25_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['user', 'ai_enabled'], name='files_user_id_6cc0f2_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['ai_processing_status'], name='files_ai_proc_52ee0a_idx'),
        ),
    ]
